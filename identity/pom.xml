<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.santiago_tumbaco</groupId>
	<artifactId>identity</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>identity</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>24</java.version>
		<grpc.version>1.72.0</grpc.version>
		<protobuf-java.version>4.30.2</protobuf-java.version>
		<spring-grpc.version>0.10.0</spring-grpc.version>
		<logstash-logback-encoder.version>8.1</logstash-logback-encoder.version>
	</properties>
	<dependencies>
    <!-- Spring básicos -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- Para llamar Discovery/JWKS con WebClient -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>

    <!-- Spring for gRPC (arranca servidor y autoconfigura interceptores) -->
    <dependency>
      <groupId>org.springframework.grpc</groupId>
      <artifactId>spring-grpc-spring-boot-starter</artifactId>
    </dependency>

    <!-- Runtime gRPC/Protobuf para el código generado -->
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${protobuf-java.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty-shaded</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- Reflection service para depuración/grpcurl -->
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-services</artifactId>
    </dependency>

    <!-- Para decodificar/verificar JWT/JWKS con Spring Security -->
	<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-oauth2-jose</artifactId>
	</dependency>

    <!-- Caché opcional para JWKS -->
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
    </dependency>

    <!-- Tracing con Micrometer + exportador OTLP -->
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-tracing-bridge-otel</artifactId>
    </dependency>
    <dependency>
		<groupId>io.opentelemetry</groupId>
		<artifactId>opentelemetry-exporter-otlp</artifactId>
	</dependency>
	<!-- Autoconfig OTel (respeta variables de entorno OTEL_*) -->
	<dependency>
		<groupId>io.opentelemetry</groupId>
		<artifactId>opentelemetry-sdk-extension-autoconfigure</artifactId>
	</dependency>
	<!-- API OTel para spans manuales en interceptores -->
	<dependency>
		<groupId>io.opentelemetry</groupId>
		<artifactId>opentelemetry-api</artifactId>
	</dependency>

	<!-- Logs JSON + Sentry -->
	<dependency>
		<groupId>io.sentry</groupId>
		<artifactId>sentry-spring-boot-starter-jakarta</artifactId>
		<version>8.19.1</version>
	</dependency>
	<dependency>
		<groupId>io.sentry</groupId>
		<artifactId>sentry-logback</artifactId>
		<version>8.19.1</version>
	</dependency>
	<dependency>
		<groupId>net.logstash.logback</groupId>
		<artifactId>logstash-logback-encoder</artifactId>
		<version>${logstash-logback-encoder.version}</version>
	</dependency>

	<dependency>
		<groupId>com.google.protobuf</groupId>
		<artifactId>protobuf-java-util</artifactId>
		<version>${protobuf-java.version}</version>
	</dependency>

    <!-- DB -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Calidad de vida -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

	

    <!-- Tests -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.grpc</groupId>
      <artifactId>spring-grpc-test</artifactId>
      <scope>test</scope>
    </dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.grpc</groupId>
				<artifactId>spring-grpc-dependencies</artifactId>
				<version>${spring-grpc.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.github.ascopes</groupId>
				<artifactId>protobuf-maven-plugin</artifactId>
				<version>3.4.2</version>
				<configuration>
					<protocVersion>${protobuf-java.version}</protocVersion>
					 <!-- Ruta compartida de .proto (relativa al módulo) -->
    				<!--<protoSourceRoot>${project.basedir}/../proto</protoSourceRoot>-->
					<binaryMavenPlugins>
						<binaryMavenPlugin>
							<groupId>io.grpc</groupId>
							<artifactId>protoc-gen-grpc-java</artifactId>
							<version>${grpc.version}</version>
							<options>@generated=omit</options>
						</binaryMavenPlugin>
					</binaryMavenPlugins>
					<!-- Incluye todos los .proto de ese root -->
					<includes>
						<include>identity.proto</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<id>generate</id>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
			<groupId>io.sentry</groupId>
			<artifactId>sentry-maven-plugin</artifactId>
			<version>0.7.1</version>
			<extensions>true</extensions>
			<configuration>
				<debugSentryCli>true</debugSentryCli>
				<org>santiago-0q</org>
				<project>java-spring-boot</project>
				<authToken>${env.SENTRY_AUTH_TOKEN}</authToken>
			</configuration>
			<executions>
				<execution>
				<goals>
					<goal>uploadSourceBundle</goal>
				</goals>
				</execution>
			</executions>
			</plugin>
		</plugins>
	</build>

</project>
